import bpy
from . import utils

def make_dynamic_enum(idname):
    def callback(self, context):
        base = utils._openvat_enum_cache.get(idname, [])
        if not base or base[0][0] != "NONE":
            base.insert(0, ("NONE", "None", ""))
        return base
    return callback

class VATSettings(bpy.types.PropertyGroup):
    vat_output_directory: bpy.props.StringProperty(
        name="Output Directory",
        description="Directory (folder) to save exported content",
        subtype='DIR_PATH',
        default="",  # Will be initialized from the scene on draw or execution
    )
    
    show_encoding_info: bpy.props.BoolProperty(
        name="Encoding Details",
        description="Show encoding details based on your current settings. This is based on currently realized data only, results may vary if vertex count changes when geometry's modifiers are applied during encoding process. Estimated min/max is shown when using automatic normal-safe edges and is determined at time of encoding",
        default=False
    )

    vat_custom_proxy: bpy.props.BoolProperty(
        name="Use Custom Proxy",
        description="Selected object acts as proxy - which can be thought of as a deformation basis. This will become the static mesh which vat encoding is relative to. Custom Proxy MUST have the exact vert count/order as the Target. Automatic Edge splitting is not applied to proxy objects.",
        default=False
    )

    custom_attr_1: bpy.props.EnumProperty(
        name="Attribute 1",
        description="First scalar float attribute",
        items=make_dynamic_enum("1"),
    )
    custom_attr_2: bpy.props.EnumProperty(
        name="Attribute 2",
        description="Second scalar float attribute",
        items=make_dynamic_enum("2"),
    )
    custom_attr_3: bpy.props.EnumProperty(
        name="Attribute 3",
        description="Third scalar float attribute",
        items=make_dynamic_enum("3"),
    )
    
    vat_transform: bpy.props.EnumProperty(
        name="Transform Space",
        description="Interpret options for object transforms (world location of object)",
        items=[
            ('ORIGINAL', "Object", "Resulting mesh does not take object transforms into account, apply transforms on target object for best results"),
            ('RELATIVE', "World", "Target object's world transforms are baked into VAT data, origin of VAT mesh is (0,0,0). Animated or current world transforms become deformation data"),
        ],
        default='ORIGINAL'
    )
    
    proxy_method: bpy.props.EnumProperty(
        name="Proxy Method (Mesh Basis)",
        description="Select whether the proxy is generated by the target (as the start frame or current frame), or use another object as the proxy",
        items=[
            ('START_FRAME', "Start Frame", "The target's deformation as it appears in the first encoded frame becomes the Proxy"),
            ('CURRENT_FRAME', "Current Frame", "The target's deformation as it appears in the scene's current frame becomes the Proxy"),
            ('SELECTED_OBJECT', "Selected Object", "A single selected object in scene may be chosen to be used as the proxy, valid only when Target and Proxy share exact vert/face count"),
        ],
        default='START_FRAME'
    )

    vat_cleanup_enabled: bpy.props.BoolProperty(
        name="Perform Cleanup",
        description="Removes all generated data",
        default=True
    )
    
    rip_edges: bpy.props.BoolProperty(
        name="Create Normal-Safe Edges",
        description="Splits the resulting mesh on all sharp edges to provide proper per-vertex normal data (does not affect face count, increases final mesh vertex count along identified edges). Target geometry (source) is unaffected",
        default=False
    )
    
    encode_type: bpy.props.EnumProperty(
        name="Encoding Mode",
        description="Encode custom attributes",
        items=[
            ('DEFAULT', "Standard (Position/Normal)", "Standard (Position/Normal)"),
            ('CUSTOM', "Custom Attributes (float[3])", "Choose custom attributes to encode to RGB"),
        ],
        default='DEFAULT'
    )
    
    user_attribute: bpy.props.StringProperty(
        name="Custom Vector (RGB)",
        description="Vector point attribute from the target object",
        default="",
#        items=lambda self, context: get_point_attributes_filtered(self, context, data_type_filter='FLOAT_VECTOR')
    )
    
    user_scalar: bpy.props.StringProperty(
        name="Custom Float (A)",
        description="Scalar point attribute from the active object",
        default="",
#        items=lambda self, context: get_point_attributes_filtered(self, context, data_type_filter='FLOAT')
    )
    
    custom_remap: bpy.props.BoolProperty(
        name="Force 0-1 Range",
        description="Export with data in the range of (0-1) only, and provide remapping details in JSON",
        default=True
    )
    
    export_mesh: bpy.props.BoolProperty(
        name="Include Mesh Export",
        description="Selected object acts as proxy to active object. If False, uses frame 1 as proxy deformation",
        default=True
    )
    
    clean_mesh: bpy.props.BoolProperty(
        name="Strip Data",
        description="Remove vertex groups, shape keys and vertex colors from the resulting model. Target geometry (source) is unaffected",
        default=True
    )
    
    mesh_format: bpy.props.EnumProperty(
        name="Mesh Format",
        description="Choose a format to export, always in Blender transform space (-Z Forward, Y Up)",
        items=[
            ('FBX', "FBX", "Export vat-compatible mesh as .fbx"),
            ('GLB', "glTF Binary", "Export vat-compatible mesh as .glb"),
            ('GLTF', "glTF Separate", "Export vat-compatible as .gltf + .bin + textures"),
        ],
        default='FBX'
    )
    
    use_transform: bpy.props.BoolProperty(
        name="Bake World Transform",
        description="Encode the world transform, as defined on the encode-target's object data - result pivot will always be (0,0,0)",
        default=True
    )
    
    encode_target: bpy.props.EnumProperty(
        name="Encode Target Type",
        description="Choose a target to encoding",
        items=[
            ('ACTIVE_OBJECT', "Active Object", "Encode the active object's Animation to VAT"),
            ('COLLECTION_COMBINE', "Collection (combined)", "Encode all the objects in a specified collection, combined into a single object"),
        ],
        default='ACTIVE_OBJECT'
    )
    
    image_format: bpy.props.EnumProperty(
        name="Image Format",
        description="Choose VAT image format (always RGB16)",
        items=[
            ('PNG8', "PNG8", "PNG with 8 bit color-depth | RGB8"),
            ('PNG16', "PNG16", "PNG with 16 bit color-depth | RGB16"),
            ('EXR16', "EXR16", "Recommended | OpenEXR Float (half) in ZIP Codec with 16 bit color-depth | RGB16(half)"),
            ('EXR32', "EXR32", "OpenEXR Float (half) Full Precision in ZIP Codec with 32 bit color-channels | RGB16(full)")
        ],
        default='EXR16'
    )
    
    vat_collection: bpy.props.PointerProperty(
        name="Target Collection",
        description="Reference to a Blender collection",
        type=bpy.types.Collection
    )
    
    vat_normal_encoding: bpy.props.EnumProperty(
        name="Normal Encoding",
        description="Choose how vertex normals are stored",
        items=[
            ('NONE', "None", "Only encode position data, do not export vertex normals data"),
            ('PACKED', "Packed", "Pack vertex normals into the same VAT as position"),
            ('SEPARATE', "Separate Map", "Use a separate texture output for vertex normals"),
        ],
        default='PACKED'
    )
    
    use_single_row: bpy.props.BoolProperty(
        name="Use Single Row",
        description="Width of VAT in pixels becomes vertex count, height of VAT becomes frame count (exact)",
        default=True
    )

    no_remap: bpy.props.BoolProperty(
        name="No Remap",
        description="Output in full precision, outside of 0-1 range (useful for Niagara and VFX systems)",
        default=False
    )


classes = [VATSettings]